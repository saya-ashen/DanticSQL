[project]
name = "danticsql"
version = "0.1.0"
authors = [
  { name="Saya Ashen", email="c3313433633@gmail.com" },
]
description = "A powerful Python utility designed to efficiently reconstruct nested SQLModel object graphs from a flat Pandas DataFrame"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pandas>=2.3.0",
    "pydantic>=2.11.7",
    "sqlmodel>=0.0.24",
]
license = { file="LICENSE" }

[project.urls]
Homepage = "https://github.com/saya-ashen/DanticSQL"
Issues = "https://github.com/saya-ashen/DanticSQL/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"




[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20
quote-style = "double"
indent-style = "space"

[tool.basedpyright]
include = ["app"]
exclude = [
    "**/__pycache__",
]
defineConstant = { DEBUG = true }

reportMissingImports = "error"
reportMissingTypeStubs = false

pythonVersion = "3.12"
pythonPlatform = "Linux"
typeCheckingMode = "standard"

[dependency-groups]
dev = [
    "ipython>=9.1.0",
    "pytest>=8.4.1",
    "twine>=6.1.0",
]

[tool.uv]
link-mode = "symlink"

[tool.uv.sources]
danticsql = { workspace = true }

